# Public: Represent a version
#
# A version is on the form MAJOR.MINOR.VERSION, where each part is a
# non-negative integer.
class Semver
  # Internal: Logic for comparing versions
  #
  #
  class Range
    # Internal: Initialize a Range
    #
    # range - The String representation of the range. This consists of a
    #         comparator followed by a version.
    def initialize(range)
      @range = range
    end

    # Internal: Test whether the given version is included in the range.
    #
    # version - A Semver version to compare against.
    #
    # Returns true if the given version is included in the range, false
    #   otherwise.
    def include?(version)
      case comparator
      when ">"
        version > our_version
      when ">="
        version >= our_version
      when "<"
        version < our_version
      when "<="
        version <= our_version
      when "~>"
        version >= our_version && version < next_version
      when "=", "==", nil
        version == our_version
      end
    end

    private

    # Extract the comparator part from the range.
    #
    # Returns the comparator as a String.
    def comparator
      @range.scan(/(?:~>|[<>]=?|==?)/).first
    end

    # Returns a Semver object representing the version in the range string.
    def our_version
      parts = @range.scan(/\d+/)
      parts.fill("0", parts.length...3)
      Semver.new(parts.join("."))
    end

    # Generate a Semver object for the "next" version.
    #
    # The next version is generated by incrementing the 
    #
    # Returns a Semver object for the next version.
    def next_version
      our_version.increment(:major)
    end
  end

  include Comparable

  attr_reader :major, :minor, :patch, :parts

  # Public: Initialize a Semver version.
  #
  # version - A version string of the format MAJOR.MINOR.PATCH where each
  #           component is a non-negative integer.
  def initialize(version)
    @parts = version.split(".").map(&:to_i)
    @major, @minor, @patch = @parts
  end

  # Public: Check whether this version is included in the given range.
  #
  # A range is a comparator (>, >=, =, <=, <, ~>) followed by a version,
  # optionally separated by whitespace.
  #
  # Most of the comparators do what you would expect (see `<=>` for more info
  # on the implementation of them), but `~>` is a bit special. The `~>`
  # comparator checks if the version is greater than or equal to the given
  # version, but less than the "next" version. The next version is computed
  # by taking the second-to-last component given and incrementing it by one,
  # resetting all components after that to zero. For example, `~> 1.1` would
  # include `1.1.0`, `1.2.3`, etc., but not `1.0.0` or `2.0.0`.
  #
  # range - A range string to compare against (see above).
  #
  # Returns true if this version is included in the range, false otherwise.
  def included_in?(range)
    Range.new(range).include?(self)
  end

  def <=>(other)
    parts.zip(other.parts).
      map { |this, other| this <=> other }.
      find { |res| res != 0 } || 0
  end

  # Public: Increment a part of the version.
  #
  # This will increment the part by 1, and reset the parts after it to 0.
  #
  # part - One of `:major`, `:minor` or `:patch`.
  #
  # Examples
  #
  #   Semver.new("1.2.3").increment(:minor).to_s
  #   # => "1.3.0"
  #
  # Returns a new Semver with the given part incremented.
  def increment(part)
    case part
    when :major
      Semver.new([major + 1, 0, 0].join("."))
    when :minor
      Semver.new([major, minor + 1, 0].join("."))
    when :patch
      Semver.new([major, minor, patch + 1].join("."))
    end
  end

  # Public: Convert the version back to its string representation.
  #
  # Returns the String MAJOR.MINOR.PATCH.
  def to_s
    [major, minor, patch].join(".")
  end
end
